// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ExampleServiceInterface is an autogenerated mock type for the ExampleServiceInterface type
type ExampleServiceInterface struct {
	mock.Mock
}

type ExampleServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ExampleServiceInterface) EXPECT() *ExampleServiceInterface_Expecter {
	return &ExampleServiceInterface_Expecter{mock: &_m.Mock}
}

// GetExample provides a mock function with given fields:
func (_m *ExampleServiceInterface) GetExample() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExampleServiceInterface_GetExample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExample'
type ExampleServiceInterface_GetExample_Call struct {
	*mock.Call
}

// GetExample is a helper method to define mock.On call
func (_e *ExampleServiceInterface_Expecter) GetExample() *ExampleServiceInterface_GetExample_Call {
	return &ExampleServiceInterface_GetExample_Call{Call: _e.mock.On("GetExample")}
}

func (_c *ExampleServiceInterface_GetExample_Call) Run(run func()) *ExampleServiceInterface_GetExample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExampleServiceInterface_GetExample_Call) Return(_a0 string, _a1 error) *ExampleServiceInterface_GetExample_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExampleServiceInterface_GetExample_Call) RunAndReturn(run func() (string, error)) *ExampleServiceInterface_GetExample_Call {
	_c.Call.Return(run)
	return _c
}

// SayHello provides a mock function with given fields:
func (_m *ExampleServiceInterface) SayHello() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExampleServiceInterface_SayHello_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SayHello'
type ExampleServiceInterface_SayHello_Call struct {
	*mock.Call
}

// SayHello is a helper method to define mock.On call
func (_e *ExampleServiceInterface_Expecter) SayHello() *ExampleServiceInterface_SayHello_Call {
	return &ExampleServiceInterface_SayHello_Call{Call: _e.mock.On("SayHello")}
}

func (_c *ExampleServiceInterface_SayHello_Call) Run(run func()) *ExampleServiceInterface_SayHello_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExampleServiceInterface_SayHello_Call) Return(_a0 string, _a1 error) *ExampleServiceInterface_SayHello_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExampleServiceInterface_SayHello_Call) RunAndReturn(run func() (string, error)) *ExampleServiceInterface_SayHello_Call {
	_c.Call.Return(run)
	return _c
}

// SayHi provides a mock function with given fields:
func (_m *ExampleServiceInterface) SayHi() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExampleServiceInterface_SayHi_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SayHi'
type ExampleServiceInterface_SayHi_Call struct {
	*mock.Call
}

// SayHi is a helper method to define mock.On call
func (_e *ExampleServiceInterface_Expecter) SayHi() *ExampleServiceInterface_SayHi_Call {
	return &ExampleServiceInterface_SayHi_Call{Call: _e.mock.On("SayHi")}
}

func (_c *ExampleServiceInterface_SayHi_Call) Run(run func()) *ExampleServiceInterface_SayHi_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExampleServiceInterface_SayHi_Call) Return(_a0 string, _a1 error) *ExampleServiceInterface_SayHi_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExampleServiceInterface_SayHi_Call) RunAndReturn(run func() (string, error)) *ExampleServiceInterface_SayHi_Call {
	_c.Call.Return(run)
	return _c
}

// NewExampleServiceInterface creates a new instance of ExampleServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExampleServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExampleServiceInterface {
	mock := &ExampleServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
