// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"

	types "order_service/internal/types"
)

// ExampleControllerInterface is an autogenerated mock type for the ExampleControllerInterface type
type ExampleControllerInterface struct {
	mock.Mock
}

type ExampleControllerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ExampleControllerInterface) EXPECT() *ExampleControllerInterface_Expecter {
	return &ExampleControllerInterface_Expecter{mock: &_m.Mock}
}

// CallSayHello provides a mock function with given fields: ctx
func (_m *ExampleControllerInterface) CallSayHello(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExampleControllerInterface_CallSayHello_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallSayHello'
type ExampleControllerInterface_CallSayHello_Call struct {
	*mock.Call
}

// CallSayHello is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *ExampleControllerInterface_Expecter) CallSayHello(ctx interface{}) *ExampleControllerInterface_CallSayHello_Call {
	return &ExampleControllerInterface_CallSayHello_Call{Call: _e.mock.On("CallSayHello", ctx)}
}

func (_c *ExampleControllerInterface_CallSayHello_Call) Run(run func(ctx *fiber.Ctx)) *ExampleControllerInterface_CallSayHello_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *ExampleControllerInterface_CallSayHello_Call) Return(_a0 error) *ExampleControllerInterface_CallSayHello_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExampleControllerInterface_CallSayHello_Call) RunAndReturn(run func(*fiber.Ctx) error) *ExampleControllerInterface_CallSayHello_Call {
	_c.Call.Return(run)
	return _c
}

// CallSayHi provides a mock function with given fields: ctx
func (_m *ExampleControllerInterface) CallSayHi(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExampleControllerInterface_CallSayHi_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallSayHi'
type ExampleControllerInterface_CallSayHi_Call struct {
	*mock.Call
}

// CallSayHi is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *ExampleControllerInterface_Expecter) CallSayHi(ctx interface{}) *ExampleControllerInterface_CallSayHi_Call {
	return &ExampleControllerInterface_CallSayHi_Call{Call: _e.mock.On("CallSayHi", ctx)}
}

func (_c *ExampleControllerInterface_CallSayHi_Call) Run(run func(ctx *fiber.Ctx)) *ExampleControllerInterface_CallSayHi_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *ExampleControllerInterface_CallSayHi_Call) Return(_a0 error) *ExampleControllerInterface_CallSayHi_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExampleControllerInterface_CallSayHi_Call) RunAndReturn(run func(*fiber.Ctx) error) *ExampleControllerInterface_CallSayHi_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoute provides a mock function with given fields:
func (_m *ExampleControllerInterface) GetRoute() types.Route {
	ret := _m.Called()

	var r0 types.Route
	if rf, ok := ret.Get(0).(func() types.Route); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.Route)
	}

	return r0
}

// ExampleControllerInterface_GetRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoute'
type ExampleControllerInterface_GetRoute_Call struct {
	*mock.Call
}

// GetRoute is a helper method to define mock.On call
func (_e *ExampleControllerInterface_Expecter) GetRoute() *ExampleControllerInterface_GetRoute_Call {
	return &ExampleControllerInterface_GetRoute_Call{Call: _e.mock.On("GetRoute")}
}

func (_c *ExampleControllerInterface_GetRoute_Call) Run(run func()) *ExampleControllerInterface_GetRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExampleControllerInterface_GetRoute_Call) Return(_a0 types.Route) *ExampleControllerInterface_GetRoute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExampleControllerInterface_GetRoute_Call) RunAndReturn(run func() types.Route) *ExampleControllerInterface_GetRoute_Call {
	_c.Call.Return(run)
	return _c
}

// PostExample provides a mock function with given fields: ctx
func (_m *ExampleControllerInterface) PostExample(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExampleControllerInterface_PostExample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostExample'
type ExampleControllerInterface_PostExample_Call struct {
	*mock.Call
}

// PostExample is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *ExampleControllerInterface_Expecter) PostExample(ctx interface{}) *ExampleControllerInterface_PostExample_Call {
	return &ExampleControllerInterface_PostExample_Call{Call: _e.mock.On("PostExample", ctx)}
}

func (_c *ExampleControllerInterface_PostExample_Call) Run(run func(ctx *fiber.Ctx)) *ExampleControllerInterface_PostExample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *ExampleControllerInterface_PostExample_Call) Return(_a0 error) *ExampleControllerInterface_PostExample_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExampleControllerInterface_PostExample_Call) RunAndReturn(run func(*fiber.Ctx) error) *ExampleControllerInterface_PostExample_Call {
	_c.Call.Return(run)
	return _c
}

// fetchExample provides a mock function with given fields: ctx
func (_m *ExampleControllerInterface) fetchExample(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExampleControllerInterface_fetchExample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'fetchExample'
type ExampleControllerInterface_fetchExample_Call struct {
	*mock.Call
}

// fetchExample is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *ExampleControllerInterface_Expecter) fetchExample(ctx interface{}) *ExampleControllerInterface_fetchExample_Call {
	return &ExampleControllerInterface_fetchExample_Call{Call: _e.mock.On("fetchExample", ctx)}
}

func (_c *ExampleControllerInterface_fetchExample_Call) Run(run func(ctx *fiber.Ctx)) *ExampleControllerInterface_fetchExample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *ExampleControllerInterface_fetchExample_Call) Return(_a0 error) *ExampleControllerInterface_fetchExample_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExampleControllerInterface_fetchExample_Call) RunAndReturn(run func(*fiber.Ctx) error) *ExampleControllerInterface_fetchExample_Call {
	_c.Call.Return(run)
	return _c
}

// NewExampleControllerInterface creates a new instance of ExampleControllerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExampleControllerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExampleControllerInterface {
	mock := &ExampleControllerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
